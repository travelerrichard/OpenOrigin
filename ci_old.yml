name: ci
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema ruff mypy

      - name: Lint (ruff) & type check (mypy) - non-fatal for now
        continue-on-error: true
        run: |
          ruff check originals_etl.py || true
          mypy --ignore-missing-imports originals_etl.py || true

      - name: Validate manifests (schema)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f schemas/manifest.schema.json ]; then
            echo "[ci] Found schemas/manifest.schema.json"
            if ls samples/*manifest*.json >/dev/null 2>&1; then
              for f in samples/*manifest*.json; do
                echo "[ci] Validating $f"
                python - <<'PY'
import json, sys
from jsonschema import validate, Draft7Validator
sch=json.load(open("schemas/manifest.schema.json","r",encoding="utf-8"))
doc=json.load(open(sys.argv[1],"r",encoding="utf-8"))
v=Draft7Validator(sch)
errs=sorted(v.iter_errors(doc), key=lambda e: e.path)
if errs:
  for e in errs:
    print("ERROR:", "/".join(map(str,e.path)) or "<root>", "-", e.message)
  sys.exit(1)
print("OK:", sys.argv[1])
PY
                "$f"
              done
            else
              echo "[ci] No sample manifests under ./samples; skipping manifest validation."
            fi
          else
            echo "[ci] schemas/manifest.schema.json not found; skipping."
          fi

      - name: Validate redaction-rule JSONs (conditional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f schemas/redaction_profile.schema.json ]; then
            echo "[ci] Found schemas/redaction_profile.schema.json"
            if ls helpers/profiles/*.json >/dev/null 2>&1; then
              for f in helpers/profiles/*.json; do
                if python - <<'PY'
import json,sys
try:
  d=json.load(open(sys.argv[1])); sys.exit(0 if 'remove_tags' in d else 2)
except Exception: sys.exit(3)
PY
                "$f"; then
                  echo "[ci] Validating redaction rules in $f"
                  python - <<'PY'
import json,sys
from jsonschema import validate, Draft7Validator
sch=json.load(open("schemas/redaction_profile.schema.json","r",encoding="utf-8"))
doc=json.load(open(sys.argv[1],"r",encoding="utf-8"))
v=Draft7Validator(sch)
errs=sorted(v.iter_errors(doc), key=lambda e: e.path)
if errs:
  for e in errs:
    print("ERROR:", "/".join(map(str,e.path)) or "<root>", "-", e.message)
  sys.exit(1)
print("OK:", sys.argv[1])
PY
                  "$f"
                else
                  echo "[ci] $f lacks 'remove_tags' â€” skipping."
                fi
              done
            else
              echo "[ci] No files in helpers/profiles; skipping."
            fi
          else
            echo "[ci] schemas/redaction_profile.schema.json not found; skipping."
          fi
